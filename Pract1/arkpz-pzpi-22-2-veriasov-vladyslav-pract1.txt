Харківський університет радіоелектроніки Факультет комп'ютерних наук 
Кафедра програмної інженерії





ЗВІТ
до практичної роботи з дисципліни «Аналіз та рефакторинг коду»
на тему: «Основні рекомендації написання коду для обраної мови програмування» 







Виконав ст. гр ПЗПІ-22-2 Верясов Владислав Олексійович

Перевірив
Доцент кафедри ПІ Лещинський Володимир Олександрович 







Харків 2024

МЕТА

Метою даної роботи є ознайомлення з основними рекомендаціями та принципами написання коду на мові програмування Rust. Rust стрімко набирає популярність завдяки своїм унікальним можливостям забезпечення безпеки пам'яті та високої продуктивності. Основна задача — зрозуміти, як ключові особливості Rust, такі як система власності (ownership), управління позичанням (borrowing) та типи Option і Result, допомагають уникати типових помилок, що трапляються в інших мовах програмування.
Ця робота також націлена на вивчення підходів до організації багатопотокових додатків у Rust, де мова пропонує безпечне використання ресурсів і синхронізацію потоків, без необхідності складних механізмів для захисту даних, як це є в інших мовах. Крім того, важливим аспектом є ознайомлення з культурою та кращими практиками Rust, такими як використання системи тестування та інструментів форматування коду, що сприяють полегшенню розробки та підтримки програмного забезпечення.

ЗАВДАННЯ

Завданням практичної роботи є написання основних рекомендацій написання коду для мови програмування Rust.

ХІД РОБОТИ

Rust — це системна мова програмування, створена для забезпечення безпеки пам'яті та продуктивності, без використання сміттєзбирача. Вона поєднує високорівневі можливості з низькорівневим доступом до системних ресурсів, що робить її ідеальною для розробки високопродуктивних додатків.


Переваги Rust:
1.	Безпека пам'яті: Використовує систему власності (ownership) для керування ресурсами, що запобігає помилкам типу "null pointer" або "use-after-free".
2.	Висока продуктивність: Код компілюється в машинний код і працює так само швидко, як C або C++.
3.	Безпечна багатопотоковість: Вбудовані механізми Rust запобігають виникненню умов гонки під час багатопотокової обробки.
4.	Екосистема та інструменти: Мова має потужний менеджер пакетів (Cargo) та зручні інструменти для тестування й форматування коду.

Це робить Rust одним із найкращих варіантів для розробки системного програмного забезпечення та проектів, де критично важливі продуктивність та безпека.



ВИСНОВКИ


У процесі виконання даної роботи було розглянуто низку важливих принципів та рекомендацій для написання якісного та ефективного коду на мові Rust.
У результаті, Rust є чудовим вибором для розробки додатків, де важливі надійність, безпека пам'яті та продуктивність. Використання рекомендацій, описаних у роботі, дозволяє створювати код, що не тільки легше підтримується, але й гарантує високий рівень якості та безпеки, що стає все більш важливим у сучасному світі розробки програмного забезпечення.
